'''Build a working roulette game.  At minimum, this script should
Complete one round of roulette - but if you're up to the challenge,
feel free to build a full command line interface through which '''

import random
import math
random.seed(1)
class Bet:    
    def __init__(self, name, num_of_bets, bet_color= None, bet_number=None):
        self.name = name
        self.bet_color
        self.numbers = numbers
        self.num_of_bets = num_of_bets
    
bank_account = 1000

green = [0, 37]
red = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]
black = [2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35]

board = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 13, 14],
        [15, 16, 17], [18, 19, 20],[21, 22, 23], [24, 25, 26],
        [27, 28, 29], [30, 31, 32], [33, 34, 35], [36, 37, 38]]

guess_type = ["Red","Green","Black", "Straight", "Column", "Even", "Odd", "Dozen(1-3)", "1-18", "19-36","Six line", "Split", "Street", "Corner", "Top-line"]

def roll_ball():
    '''returns a random number between 0 and 37'''
    return math.floor(random.random() * 38)

def check_results():
    '''Compares bet_color to color rolled.  Compares
    bet_number to number_rolled.'''
    pass

def payout():
    '''returns total amount won or lost by user based on results of roll. '''

def play_game():
    """This is the main function for the game.
    When this function is called, one full iteration of roulette,
    including:
    """
    bet_arr = []
    while(bank_account > 0):
        print("You currently have ${}".format(bank_account))
        for a, b in enumerate(guess_type, 1):
            print('{} {}'.format(a, b))
        menu_option =int(input("Choose a number"))
        if(menu_option == 1):
             
        elif(menu_option == 2):
        
play_game()
